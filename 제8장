# hello

거대한 표현을 쪼개기

코드의 표현이 커지면 커질수록 이해하기 더 어렵다.
  -> 작은 조각으로 나누는 방법을 배우자

설명변수

작은 하위 표현을 담을 추가변수 (하위표현의 의미를 설명하므라 설명 변수라고도 한다)를 더하여 커다란 표현을 쪼갠다.

요약변수

커다란 코드 덩어리 (e.g. 다중 변수)를 짧은 이름으로 대체한다. 
요약 변수를 사용하면 더 쉽게 관리하고 목적을 파악할 수 있다.

드모르간의 법칙

not (a or b or c) => (not a) and (not b) and (not c)
not (a and b and c) => (not a) or (not b) or (not c)

드모르간의 법칙을 이용하여 복잡하게 생긴 불리언 표현을 간단하게 만들 수 있다.

e.g. if(!(file_exists && !is_protected)) => if(!file_exists || is_protected)

Short-Circuit Logic 오용 말기

What is Short Circuit?
앞의 불리언 변수를 통해 전체의 값이 확정되면 나머지 불리언 변수들을 확인하지 않는 것.. 
e.g. (a || b)에서 a가 true이면 bracket 전체의 불리언 값이 true이기 때문에 b를 확인해보지 않는다. -> short circuit

책의 저자 중 한명은 
  assert((!(bucket = FindBucket(key))) || !bucket -> IsOccupited()); 라는 코드를 작성하였다.
  하지만 이 코드는 복잡하게 생겼고 이해하기 힘들다.
  
  차라리 이해하기 쉽고 더 직관적인
  bucket = FindBucket(key);
  if(bucket != NULL) assert(!bucket -> IsOccupied());
  를 사용하는 것이 더 편하다.

하지만 코드가 단순하다면 당연히 short circuit logic을 사용하여도 괜찮다!

복잡한 코드와 씨름하기

어떠한 Logic을 Algorithm 형태로 만들 때, Logic을 구현함에 있어서 더 편한 방법이 있는 지를 생각해본다. 
-> 코드 예쁘기 만들기보단 알고리즘에 더 가까운거 같다

거대한 구문 나누기

반복되는 코드가 있다면 반복에서 작성하지말고 함수를 만들어서 코드를 깨끗하게 만들자
DRY - Don't Repeat Yourself 

추가로 다른 창의적인 방법들 (e.g. 매크로의 사용)을 사용하여 코드를 깔끔하게 만들자.

예제

    void SetUpSkillUI()
    {
        for (int i = 0; i < max_inventory_items; i++)
        {
            GameObject SkillUI = Instantiate(new GameObject("Skill" + i), new Vector3(0, 0, 0), Quaternion.identity);
            SkillUI.transform.SetParent(inventoryUIFrame.transform);
            SkillUI.AddComponent<Image>();
            SkillUI.GetComponent<RectTransform>().anchorMin = new Vector2(1, 0.5f);
            SkillUI.GetComponent<RectTransform>().anchorMax = new Vector2(1, 0.5f);
            SkillUI.GetComponent<RectTransform>().pivot = new Vector2(1, 0.5f);
            SkillUI.GetComponent<RectTransform>().SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 40);
            SkillUI.GetComponent<RectTransform>().SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 40);
            SkillUI.GetComponent<RectTransform>().anchoredPosition = new Vector2(-49.5f - 45 * (i - 1), 0);
            SkillUI.GetComponent<Image>().type = Image.Type.Filled;
            SkillUI.GetComponent<Image>().fillMethod = Image.FillMethod.Vertical;
            SkillUI.GetComponent<Image>().enabled = false;
            inventory_UI.Add(SkillUI);
        }
        ui_index = 0;
    }


